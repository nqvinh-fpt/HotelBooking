@{
    Layout = "_Layout";
    ViewData["Title"] = "Index";
    var renderedRoomTypes = new HashSet<string>();
    var renderedRoomStatus = new HashSet<string>();
}
<style>
    .room-card img {
        height: 200px; /* Adjust the height as needed */
        object-fit: cover;
        width: 100%;
    }

    .room-item img {
        height: 50px;
        object-fit: cover;
    }

    .room-item {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }

        .room-item .position-relative {
            flex-shrink: 0;
        }

        .room-item img {
            width: 100%;
            height: 250px;
            object-fit: cover;
        }

        .room-item .content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .room-item .d-flex.mb-3 {
            flex-grow: 1;
        }

        .room-item .btn-container {
            display: flex;
            justify-content: space-between;
        }

            .room-item .btn-container .btn {
                width: 48%;
            }
</style>
<!-- Page Header Start -->
<div class="container-fluid page-header mb-5 p-0" style="background-image: url(/img/carousel-1.jpg);">
    <div class="container-fluid page-header-inner py-5">
        <div class="container text-center pb-5">
            <h1 class="display-3 text-white mb-3 animated slideInDown">Rooms</h1>
            <nav aria-label="breadcrumb">
            </nav>
        </div>
    </div>
</div>
<!-- Page Header End -->
<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Our Rooms</h6>
            <h1 class="mb-5">Explore Our <span class="text-primary text-uppercase">Rooms</span></h1>
        </div>
        <div id=
        <div class="row g-4">
            <div class="col-lg-12">
                <div class="row g-4">
                </div>
                <div class="row g-4">
                    <div class="col-lg-3">
                        <div class="row g-4">
                            <div class="col-lg-12">
                                <div class="mb-3">
                                    <h4>Room Type</h4>
                                    <ul class="list-unstyled fruite-categorie" id="room-type-filter">
                                        <button id="clear-room-type" class="btn btn-sm btn-primary rounded py-2 px-4">Clear</button>
                                            @foreach (var room in Model)
                                            {
                                                if (!renderedRoomTypes.Contains(room.RoomType))
                                                {
                                                    <li>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="radio" name="roomType" id="roomType-@room.RoomType" value="@room.RoomType" data-room-type="@room.RoomType">
                                                            <label class="form-check-label" for="roomType-@room.RoomType">
                                                                                                @room.RoomType
                                                            </label>
                                                        </div>
                                                    </li>
                                                    renderedRoomTypes.Add(room.RoomType);
                                                }
                                            }
                                     </ul>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="mb-3">
                                    <h4>Room Status</h4>
                                    <ul class="list-unstyled fruite-categorie" id="room-status-filter">
                                        <button id="clear-room-status" class="btn btn-sm btn-primary rounded py-2 px-4">Clear</button>
                                            @foreach (var room in Model)
                                            {
                                                if (!renderedRoomStatus.Contains(room.Status))
                                                {
                                                    <li>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="radio" name="roomStatus" id="roomStatus-@room.Status" value="@room.Status" data-status="@room.Status">
                                                            <label class="form-check-label" for="roomStatus-@room.Status">
                                                                                                @room.Status
                                                            </label>
                                                        </div>
                                                    </li>
                                                    renderedRoomStatus.Add(room.Status);
                                                }
                                            }
</ul>
                                </div>
                            </div>

                            @* <div class="col-lg-12">
                                <div class="mb-3">
                                    <h4>Additional</h4>
                                    <div class="mb-2">
                                        <input type="radio" class="me-2" id="Categories-1" name="Categories-1" value="Beverages">
                                        <label for="Categories-1"> Organic</label>
                                    </div>
                                    <div class="mb-2">
                                        <input type="radio" class="me-2" id="Categories-2" name="Categories-1" value="Beverages">
                                        <label for="Categories-2"> Fresh</label>
                                    </div>
                                    <div class="mb-2">
                                        <input type="radio" class="me-2" id="Categories-3" name="Categories-1" value="Beverages">
                                        <label for="Categories-3"> Sales</label>
                                    </div>
                                    <div class="mb-2">
                                        <input type="radio" class="me-2" id="Categories-4" name="Categories-1" value="Beverages">
                                        <label for="Categories-4"> Discount</label>
                                    </div>
                                    <div class="mb-2">
                                        <input type="radio" class="me-2" id="Categories-5" name="Categories-1" value="Beverages">
                                        <label for="Categories-5"> Expired</label>
                                    </div>
                                </div>
                            </div> *@
                        </div>
                    </div>
                    <div class="col-lg-9">
                        <div class="row g-4 justify-content-center" id="rooms-container">
                            <!-- Rooms will be inserted here -->
                        </div>
                        <div class="text-center" style="margin-top: 100px">
                            <div id="pagination" class="btn-group">
                                <!-- Pagination buttons will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Fruits Shop End-->
<!-- Newsletter Start -->
<script>
        let currentPage = 1;
        const pageSize = 6;
        let selectedRoomType = null;
        let selectedRoomStatus = null;
        document.addEventListener('DOMContentLoaded', function () {
            fetchRooms(currentPage);

            document.getElementById('pagination').addEventListener('click', function (event) {
                if (event.target.tagName === 'BUTTON') {
                    currentPage = parseInt(event.target.dataset.page);
                    fetchRooms(currentPage);
                }
            });

            document.getElementById('room-type-filter').addEventListener('change', function (event) {
                if (event.target.tagName === 'INPUT' && event.target.type === 'radio') {
                    selectedRoomType = event.target.dataset.roomType || null;
                    currentPage = 1;
                    fetchRooms(currentPage);
                }
            });

            document.getElementById('room-status-filter').addEventListener('change', function (event) {
                if (event.target.tagName === 'INPUT' && event.target.type === 'radio') {
                    selectedRoomStatus = event.target.dataset.status || null;
                    currentPage = 1;
                    fetchRooms(currentPage);
                }
            });

            document.getElementById('clear-room-type').addEventListener('click', function () {
                selectedRoomType = null;
                document.querySelectorAll('input[name="roomType"]').forEach(input => input.checked = false);
                currentPage = 1;
                fetchRooms(currentPage);
            });

            document.getElementById('clear-room-status').addEventListener('click', function () {
                selectedRoomStatus = null;
                document.querySelectorAll('input[name="roomStatus"]').forEach(input => input.checked = false);
                currentPage = 1;
                fetchRooms(currentPage);
            });
        });

        async function fetchRooms(page) {
            try {
                let url = `https://localhost:7092/api/Rooms/pagingRooms?page=${page}&pageSize=${pageSize}`;
                if (selectedRoomType) {
                    url += `&roomType=${encodeURIComponent(selectedRoomType)}`;
                }
                if (selectedRoomStatus) {
                    url += `&status=${encodeURIComponent(selectedRoomStatus)}`;
                }
                const response = await fetch(url);
                const data = await response.json();
                renderRooms(data.rooms);
                renderPagination(page, data.totalPages);
            } catch (error) {
                console.error('Error fetching rooms:', error);
            }
        }


        async function getRoomRatingById(roomId) {
            try {
                const response = await fetch(`https://localhost:7092/api/Rooms/GetRatings/${roomId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                const rating = await response.json();
                return rating;
            } catch (error) {
                console.error('Error fetching room rating:', error);
                return 0; // Default rating in case of an error
            }
        }

        async function renderRooms(rooms) {
            const roomsContainer = document.getElementById('rooms-container');
            roomsContainer.innerHTML = '';

            for (const room of rooms) {
                const rating = await getRoomRatingById(room.roomId);

                const roomElement = document.createElement('div');
                roomElement.classList.add('col-lg-4', 'col-md-6', 'wow', 'fadeInUp');
                roomElement.dataset.wowDelay = '0.1s';

                const ratingStars = Array(5).fill('<small class="fa fa-star"></small>')
                    .map((star, index) => index < rating ? star.replace('fa-star', 'fa-star text-primary') : star)
                    .join('');

                roomElement.innerHTML = `
                            <div class="room-item shadow rounded overflow-hidden">
                                <div class="position-relative">
                                    <img class="img-fluid" src="${room.roomImage}" alt="">
                                    <small class="position-absolute start-0 top-100 translate-middle-y bg-primary text-white rounded py-1 px-3 ms-4">$${room.price}/Night</small>
                                </div>
                                <div class="p-4 mt-2">
                                    <div class="d-flex justify-content-between mb-3">
                                        <h5 class="mb-0">${room.roomType}</h5>
                                        <div class="ps-2">
                                            ${ratingStars}
                                        </div>
                                    </div>
                                    <div class="d-flex flex-column mb-3">
                                        <small class="mb-2"><i class="fa fa-bed text-primary me-2"></i>${room.roomNumber} Bed</small>
                                        <small class="mb-2"><i class="fa fa-bath text-primary me-2"></i>${room.status} Bath</small>
                                        <small class="mb-2"><i class="fa fa-wifi text-primary me-2"></i>${room.amenities}</small>
                                    </div>
                                    <p class="text-body mb-3">This room is located on floor ${room.floor}.</p>
                                    <div class="d-flex justify-content-between">
                                        <a class="btn btn-sm btn-primary rounded py-2 px-4" href="/Rooms/Details/${room.roomId}">View Detail</a>
                                                <a class="btn btn-sm ${room.status === 'Available' ? 'btn-dark' : 'btn-secondary disabled'} rounded py-2 px-4" href="${room.status === 'Available' ? `/Bookings/Place/${room.roomId}` : '#'}">
                                                    ${room.status === 'Available' ? 'Book Now' : 'Not Available'}
                                                </a>
                                    </div>
                                </div>
                            </div>
                            `;

                roomsContainer.appendChild(roomElement);
            }
        }

        function renderPagination(currentPage, totalPages) {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) return;

            const createButton = (text, page) => {
                const button = document.createElement('button');
                button.classList.add('btn', 'btn-primary', 'mx-1');
                button.textContent = text;
                button.dataset.page = page;
                return button;
            };

            const addEllipsis = () => {
                const ellipsis = document.createElement('span');
                ellipsis.textContent = '...';
                paginationContainer.appendChild(ellipsis);
            };

            // Add first page
            paginationContainer.appendChild(createButton('1', 1));

            // Add ellipsis if necessary
            if (currentPage > 3) {
                addEllipsis();
            }

            // Add pages around the current page
            for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
                paginationContainer.appendChild(createButton(i.toString(), i));
            }

            // Add ellipsis if necessary
            if (currentPage < totalPages - 2) {
                addEllipsis();
            }

            // Add last page
            if (totalPages > 1) {
                paginationContainer.appendChild(createButton(totalPages.toString(), totalPages));
            }
        }

</script>